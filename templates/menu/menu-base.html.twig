{% extends '@KnpMenu/menu.html.twig' %}

{% block root %}
    {% set listAttributes = item.childrenAttributes|merge({'class': 'nav'}) %}
    {{ block('list') -}}
{% endblock %}

{% block label %}
    {% if item.extras.icon|default(false) %}
        <i class="bi bi-{{ item.extras.icon }} me-2"></i>
    {% endif %}

    {{ parent() }}
{% endblock %}


{%- block spanElement -%}
    {% import _self as knp_menu %}
    <span{{ knp_menu.attributes(item.labelAttributes|merge({
        'data-bs-toggle': 'dropdown',
        'class': 'nav-link' ~ (item.children|length > 0 ? ' dropdown-toggle' : '')
    })) }}>{{ block('label') }}</span>
{%- endblock -%}

{% block list %}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {% import _self as knp_menu %}
        <ul{{ knp_menu.attributes(listAttributes|merge({})) }}>
            {{ block('children') }}
        </ul>
    {% endif %}
{% endblock %}

{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {% set classes = classes|merge(['nav-item']) %}

        {% if item.hasChildren and options.depth is not same as(0) %}
            {% set classes = classes|merge(['dropdown']) %}
        {% endif %}

        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {%- set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {%- set classes = classes|merge([options.leaf_class]) %}
        {%- endif %}

        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}

        {# displaying the item #}
        {% import _self as knp_menu %}

        <li{{ knp_menu.attributes(attributes) }}>
            {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}

            {# render the list of children#}
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level, 'dropdown-menu']) %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
            {{ block('list') }}
        </li>
    {% endif %}
{% endblock %}
